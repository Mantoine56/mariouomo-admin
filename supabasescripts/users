-- Create the user_profiles table
CREATE TABLE public.user_profiles (
    id uuid references auth.users on delete cascade not null primary key,
    full_name text,
    role text check (role in ('admin', 'manager', 'staff')) not null default 'staff',
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Enable Row Level Security
ALTER TABLE public.user_profiles ENABLE ROW LEVEL SECURITY;

-- Create policies
CREATE POLICY "Users can view their own profile" 
    ON public.user_profiles
    FOR SELECT 
    USING (auth.uid() = id);

CREATE POLICY "Users can update their own profile" 
    ON public.user_profiles
    FOR UPDATE
    USING (auth.uid() = id);

-- Admin policy (only admins can view all profiles)
CREATE POLICY "Admins can view all profiles" 
    ON public.user_profiles
    FOR SELECT 
    USING (
        EXISTS (
            SELECT 1 FROM public.user_profiles 
            WHERE id = auth.uid() AND role = 'admin'
        )
    );

-- Admin policy (only admins can update all profiles)
CREATE POLICY "Admins can update all profiles" 
    ON public.user_profiles
    FOR UPDATE
    USING (
        EXISTS (
            SELECT 1 FROM public.user_profiles 
            WHERE id = auth.uid() AND role = 'admin'
        )
    );

-- Create trigger for updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_user_profiles_updated_at
    BEFORE UPDATE ON public.user_profiles
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Insert initial admin user for test@example.com
INSERT INTO public.user_profiles (id, full_name, role)
SELECT 
    id,
    'Test Admin',
    'admin'
FROM auth.users 
WHERE email = 'test@example.com';